# Globals definition
globals = {

    # Configuration for SSH connection parameters
    ssh_connection = {
      host             = var.SSH_HOST
      username         = var.SSH_USERNAME

      password         = var.SSH_PASSWORD
      private_key_path = var.SSH_PRIVATE_KEY_PATH
      mode             = "password"
    }

    # Parameters related to those files used/thrown at some point on VM creation
    io_files = {

      # Path to the folder containing SSH keys authorized in all the VMs
      external_ssh_keys_path = "./files/input/external-ssh-keys"

      # Path to the folder where instances' autogenerated SSH keys will be stored
      instances_ssh_keys_path = "./files/output"
    }

    # Parameters related to the installable OS on VMs creation
    os = {

      # Distro version to use
      # ATM, only ubuntu is supported, so the version is something like: 23.04
      version = "23.04"
    }
}

# Networks definition
# Possible types: nat, macvtap
# nat: Virtual interface with a subnetwork to attach instances
# macvtap: Virtual interface connected directly to a host physical interface, sharing the same network
networks = {

  # Configuration for a NAT
  virnat0 = {

    # Type of network
    # Possible values: nat, macvtap
    mode = "nat"

    # Assignable IP address blocks in CIDR notation
    # Example: [IPv4/CIDR]
    dhcp_address_blocks = ["10.10.10.0/24"]

    # Address to the gateway
    gateway_address = "10.10.10.1"
  }

  # Configuration for a second NAT
  virnat1 = {

    # Type of network
    # Possible values: nat, macvtap
    mode = "nat"

    # Assignable IP address blocks in CIDR notation
    # Example: [IPv4/CIDR]
    dhcp_address_blocks = ["10.10.20.0/24"]

    # Address to the gateway
    gateway_address = "10.10.20.1"
  }

  # Configuration for a macvtap
  external0 = {
    # Type of network
    # Possible values: nat, macvtap
    mode = "macvtap"

    # Host physical interface to attach
    # the autogenerated virtual interface
    interface = "eno1"

    # Assignable IP address blocks in CIDR notation
    # Example: [IPv4/CIDR]
    dhcp_address_blocks = ["192.168.0.200/24"]

    # Address to the gateway
    gateway_address = "192.168.0.1"
  }
}

# Instance basic definition.
# WARNING: Choose IP a address inside the right subnet
instances = {

  # Define the LoadBalancer
  kube-loadbalancer-0 = {

    # (Optional) Environment (arch and machine type) can be specified. For example, for those using too new ARM64
    # environments such as 'Orange Pi 5', specify arch as 'aarch64' and the machine as 'virt' or 'virt-XX'
    # and some tweaks will be applied under the hood.
    # DISCLAIMER: this will be needed on all the guests as the host is the same
    arch = "aarch64"
    machine = "virt"

    vcpu = 2
    memory = 2048 # 2GB
    disk = 10000000000 # 10GB
    networks = [
      {
        name = "virnat0"
        address = "10.10.10.10/24"
      },{
        name = "external0"
        address = "192.168.0.210/24"
      }
    ]
  }

  # Define the masters
  kube-master-0 = {
    vcpu = 2
    memory = 2048 # 2GB
    disk = 10000000000 # 10GB
    networks = [{
        name = "virnat0"
        address = "10.10.10.20/24"

        # (Optional) MAC address can be fixed. Useful to set simple static firewall rules
        mac = "52:54:00:56:A9:77"
    }]
  }

  kube-master-1 = {
    vcpu = 2
    memory = 2048 # 2GB
    disk = 10000000000 # 10GB
    networks = [{
        name = "virnat0"
        address = "10.10.10.21/24"
    }]
  }

  # Define the workers
  kube-worker-0 = {
    vcpu = 2
    memory = 2048 # 2GB
    disk = 20000000000 # 20GB
    networks = [{
        name = "virnat0"
        address = "10.10.10.30/24"
    }]
  }
}
