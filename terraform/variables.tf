# The globals block is the place to define global stuff
# mostly related to things that are common to all the VMs,
# such as the credentials to connect to the hypervisor
variable "globals" {
  type = object({

    # SSH parameters to connect to the host
    ssh_connection = object({
      # IP address to connect to the host
      host = string

      # Username to be authenticated in the host
      username = string

      # Password to be authenticated in the host
      password = optional(string)

      # Path to the ssh key (public or private) to be authenticated in the host
      # This key should already exists on the host machine
      key_path = optional(string)

      # Which auth method use on SSH connection: password, key
      mode = string
    })

    # Parameters related to those files used/thrown at some point on VM creation
    io_files = object({

      # Path to the folder containing SSH keys authorized in all the VMs
      # Default to: ${path.root}
      external_ssh_keys_path = optional(string)

      # Path to the folder where instances' autogenerated SSH keys will be stored
      # Default to: ${path.root}
      instances_ssh_keys_path = optional(string)
    })

    # Parameters related to the installable OS on VMs creation
    os = object({

      # Distro version to use
      # ATM, only ubuntu is supported, so the version is something like: 23.04
      version = string
    })
  })

  description = "Global configuration definition block"

  validation {
    condition     = contains(["password", "key"], var.globals.ssh_connection.mode)
    error_message = "Allowed values for ssh_connection.mode are \"password\" or \"key\"."
  }

  validation {
    condition     = can(regex("^^[[:digit:]]{2}.[[:digit:]]{2}$", var.globals.os.version))
    error_message = "Allowed values for os.version are like XX.YY."
  }
}

# The networks definition block is the place to define
# which networks of type NAT or macvtap will be created and attachable
variable "networks" {
  type = map(object({
    mode                = string
    dhcp_address_blocks = list(string)
    gateway_address     = string
    interface           = optional(string)
  }))
  description = "Networks definition block"
}

# The instances block is the place to define all the VMs
# (and their resources) that will be created
variable "instances" {
  type = map(object({
    # TODO
    arch    = optional(string, "x86_64")
    machine = optional(string)

    # TODO
    vcpu   = number
    memory = number
    disk   = number
    networks = list(object({
      name    = string
      address = string
      mac     = string
      default = optional(bool, false)
    }))
  }))
  description = "Instances definition block"

  validation {
    condition = alltrue([
      for instance_name, instance_definition in var.instances :
        (instance_definition.arch == null ? true :
          (contains(["aarch64", "x86_64"], instance_definition.arch) ? true : false))
    ])

    error_message = "Allowed values for instance.arch are \"aarch64\" or \"x86_64\"."
  }

  validation {
    condition = alltrue(flatten([
      for instance_name, instance_definition in var.instances :
      [for network in instance_definition.networks :
        can(regex("^[a-fA-F0-9]{2}(:[a-fA-F0-9]{2}){5}$", network.mac)) ]
    ]))

    error_message = "Allowed values for instance.networks.mac are like: AA:BB:CC:DD:EE:FF."
  }

  validation {
    condition = alltrue([
      for instance_name, instance_definition in var.instances :
      (
        length(instance_definition.networks) <= 1 ||
        length([for network in instance_definition.networks : network if network.default]) == 1
      )
    ])

    error_message = "In instances with more than one network, ONE and ONLY ONE network must be marked as \"default\"."
  }
}
